on:
  push:
    branches:
      - main

jobs:
  build_and_tag:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: [3.9] # You can adjust this

    steps:
    
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to fetch all history for tags
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Get version and set env
        id: get_version
        run: |
          VERSION=$(python -W ignore utils.py --version)
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          if [ -z "$VERSION" ]; then
            echo "Error: Version was not set!"
            exit 1
          fi

      - name: Create Git tag
        if: ${{ github.ref == 'refs/heads/main' }} # Only tag on pushes to main
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag "v${VERSION}" # Use the version from the script
          git push --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}

      - name: Build executable (Windows)
        if: matrix.os == 'windows-latest'
        id: build_windows
        run: |
          python -m PyInstaller --onefile --name "vcdech-v${{ env.VERSION }}-win" utils.py
          echo "EXECUTABLE_PATH=dist/vcdech-v${{ env.VERSION }}-win.exe" >> $GITHUB_OUTPUT
      - name: Build executable (Linux)
        if: matrix.os == 'ubuntu-latest'
        id: build_linux
        run: |
          python -m PyInstaller --onefile --name "vcdech-v${{ env.VERSION }}-linux" utils.py
          echo "EXECUTABLE_PATH=dist/vcdech-v${{ env.VERSION }}-linux" >> $GITHUB_OUTPUT
      - name: Build executable (macOS)
        if: matrix.os == 'macos-latest'
        id: build_mac
        run: |
          python -m PyInstaller --onefile --name "vcdech-v${{ env.VERSION }}-mac" utils.py
          echo "EXECUTABLE_PATH=dist/vcdech-v${{ env.VERSION }}-mac" >> $GITHUB_OUTPUT
          # Esegue la creazione del pacchetto DMG
          mkdir -p build
          cp dist/vcdech-v${{ env.VERSION }}-mac build/vcdech-v${{ env.VERSION }}-mac
          # Crea il file DMG
          hdiutil create -volname "vcdech-v${{ env.VERSION }}" -srcfolder build -ov -format UDZO -o "vcdech-v${{ env.VERSION }}.dmg"
          echo "EXECUTABLE_PATH=vcdech-v${{ env.VERSION }}.dmg" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vcdech-v${{ env.VERSION }}-${{ matrix.os }}
          path: ${{ steps.build_windows.outputs.EXECUTABLE_PATH || steps.build_linux.outputs.EXECUTABLE_PATH || steps.build_mac.outputs.EXECUTABLE_PATH }}
          if-no-files-found: error

      - name: Create Release
        if: ${{ github.ref == 'refs/heads/main' }} # important, only for main branch
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"
          name: "vcdech v${{ env.VERSION }}"
          body: |
            Release of vcdech version ${{ env.VERSION }}.
            Includes executables for Windows, Linux, and macOS.
          files: |
            dist/vcdech-v${{ env.VERSION }}-win.exe
            dist/vcdech-v${{ env.VERSION }}-linux
            dist/vcdech-v${{ env.VERSION }}-mac
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

